{"version":3,"sources":["webpack://sardinefish/./SardineFish.API.ts","webpack://sardinefish/webpack/bootstrap","webpack://sardinefish/webpack/startup"],"names":[],"mappings":"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","file":"SardineFish.API.js","sourcesContent":["\r\ntype HTTPMethodsWithoutBody = \"GET\" | \"HEAD\" | \"CONNECT\" | \"DELETE\" | \"OPTIONS\";\r\ntype HTTPMethodsWithBody = \"POST\" | \"PUT\" | \"PATCH\";\r\ntype HTTPMethods = HTTPMethodsWithBody | HTTPMethodsWithoutBody;\r\n\r\ntype TypeNames = \"number\" | \"string\" | \"boolean\" | \"string[]\";\r\n\r\ntype TypeOfName<T> =\r\n    T extends \"number\"\r\n    ? number\r\n    : T extends \"string\"\r\n    ? string\r\n    : T extends \"boolean\"\r\n    ? boolean\r\n    : T extends \"string[]\"\r\n    ? string[]\r\n    : never;\r\n\r\ntype Validator<T> = (key: string, value: T) => T;\r\n\r\ntype ParamInfo<T extends TypeNames> = T extends any ? {\r\n    type: T,\r\n    validator: Validator<TypeOfName<T>>,\r\n    optional?: true,\r\n} : never;\r\n\r\n\r\ntype OptionalParams<T extends { [key: string]: ParamInfo<TypeNames> }> = {\r\n    [key in keyof T as T[key][\"optional\"] extends true ? key : never]: TypeOfName<T[key][\"type\"]>;\r\n}\r\ntype RequiredParams<T extends { [key: string]: ParamInfo<TypeNames> }> = {\r\n    [key in keyof T as T[key][\"optional\"] extends true ? never : key]: TypeOfName<T[key][\"type\"]>;\r\n}\r\n\r\ntype ValueType<T extends ParamsDeclare> = Required<RequiredParams<T>> & Partial<OptionalParams<T>>;\r\n// {\r\n//     [key in keyof T]: TypeOfName<T[key][\"type\"]>\r\n// }\r\n\r\ntype ParamsDeclare = {\r\n    [key: string]: ParamInfo<TypeNames>,\r\n}\r\ntype SimpleParamsDeclare = {\r\n    [key: string]: ParamInfo<TypeNames> | TypeNames;\r\n}\r\ntype FullParamsDeclare<T extends SimpleParamsDeclare> = {\r\n    [key in keyof T]: ParamInfo<TypeNames> & (T[key] extends TypeNames ? ParamInfo<T[key]> : T[key]);\r\n}\r\n\r\ntype ApiFunction<Path extends ParamsDeclare, Query extends ParamsDeclare, Data extends ParamsDeclare | undefined, Response>\r\n    = Data extends undefined\r\n    ? (params: ValueType<Path> & ValueType<Query>) => Promise<Response>\r\n    : (params: ValueType<Path> & ValueType<Query>, body: ValueType<Data & ParamsDeclare>) => Promise<Response>;\r\n\r\n\r\ninterface ErrorResponse\r\n{\r\n    status: \">_<\";\r\n    timestamp: number;\r\n    code: number;\r\n    msg: string;\r\n}\r\n\r\ninterface SuccessResponse<T>\r\n{\r\n    status: \"^_^\";\r\n    timestamp: number;\r\n    data: T\r\n}\r\n\r\nfunction validateByPass<T>(_: string, value: T)\r\n{\r\n    return value;\r\n}\r\n\r\n\r\nfunction simpleParam<T extends SimpleParamsDeclare>(info: T): FullParamsDeclare<T>\r\n{\r\n    const params = {} as FullParamsDeclare<T>;\r\n    for (const key in info)\r\n    {\r\n        const value = info[key];\r\n        switch (info[key])\r\n        {\r\n            case \"number\":\r\n                params[key] = <ParamInfo<TypeNames>>{\r\n                    type: \"number\",\r\n                    validator: validateByPass,\r\n                } as any;\r\n                break;\r\n            case \"string\":\r\n                params[key] = <ParamInfo<\"string\">>{\r\n                    type: \"string\",\r\n                    validator: validateByPass,\r\n                } as any;\r\n                break;\r\n            case \"boolean\":\r\n                params[key] = <ParamInfo<\"boolean\">>{\r\n                    type: \"boolean\",\r\n                    validator: validateByPass,\r\n                } as any;\r\n                break;\r\n            case \"string[]\":\r\n                params[key] = <ParamInfo<\"string[]\">>{\r\n                    type: \"string[]\",\r\n                    validator: validateByPass,\r\n                } as any;\r\n                break;\r\n            default:\r\n                params[key] = value as any;\r\n        }\r\n    }\r\n    return params;\r\n}\r\n\r\n\r\nfunction validateEmail(key: string, email: string): string\r\n{\r\n    if (/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/.test(email))\r\n        return email;\r\n    throw new APIError(ClientErrorCode.InvalidParameter, `Invalid email address in '${key}'`);\r\n}\r\n\r\nfunction validateUid(key: string, uid: string): string\r\n{\r\n    if (/[_A-Za-z0-9]{6,32}/.test(uid))\r\n        return uid;\r\n    throw new APIError(ClientErrorCode.InvalidParameter, `Invalid username in field '${key}'`);\r\n}\r\n\r\nfunction validateName(key: string, name: string): string\r\n{\r\n    if (/^([^\\s][^\\t\\r\\n\\f]{0,30}[^\\s])|([^\\s])$/.test(name))\r\n        return name;\r\n    throw new APIError(ClientErrorCode.InvalidParameter, `Invalid name in '${key}'`);\r\n}\r\n\r\nfunction validateUrl(key: string, url: string): string\r\n{\r\n    return url;\r\n}\r\n\r\nfunction validateNonEmpty(key: string, text: string): string\r\n{\r\n    if (/^\\s*$/.test(text))\r\n        throw new APIError(ClientErrorCode.InvalidParameter, `'${key}' cannot be empty`);\r\n    return text;\r\n}\r\n\r\nenum ClientErrorCode\r\n{\r\n    Error = -1,\r\n    InvalidParameter = -2,\r\n    NetworkFailure = -3,\r\n    ParseError = -4,\r\n}\r\n\r\nclass APIError extends Error\r\n{\r\n    code: number;\r\n    constructor(code: number, message: string)\r\n    {\r\n        super(message);\r\n        this.code = code;\r\n    }\r\n}\r\n\r\nclass ApiBuilder<Method extends HTTPMethods, Path extends ParamsDeclare, Query extends ParamsDeclare, Data extends ParamsDeclare | undefined, Response>\r\n{\r\n    private method: Method;\r\n    private url: string;\r\n    private pathInfo: Path;\r\n    private queryInfo: Query;\r\n    private dataInfo: Data;\r\n    private redirectOption?: \"follow\" | \"error\" | \"manual\";\r\n\r\n    constructor(method: Method, url: string, path: Path, query: Query, data: Data)\r\n    {\r\n        this.method = method;\r\n        this.url = url;\r\n        this.pathInfo = path;\r\n        this.queryInfo = query;\r\n        this.dataInfo = data;\r\n    }\r\n\r\n    path<NewPath extends SimpleParamsDeclare>(path: NewPath)\r\n    {\r\n        return new ApiBuilder<Method, FullParamsDeclare<NewPath>, Query, Data, Response>(this.method, this.url, simpleParam(path), this.queryInfo, this.dataInfo);\r\n    }\r\n    query<NewQuery extends SimpleParamsDeclare>(query: NewQuery)\r\n    {\r\n        return new ApiBuilder<Method, Path, FullParamsDeclare<NewQuery>, Data, Response>(this.method, this.url, this.pathInfo, simpleParam(query), this.dataInfo);\r\n    }\r\n    body<NewData extends SimpleParamsDeclare>(data: NewData)\r\n    {\r\n        if (this.method === \"POST\" || this.method === \"PATCH\" || this.method === \"PUT\")\r\n        {\r\n            return new ApiBuilder<Method, Path, Query, FullParamsDeclare<NewData>, Response>(this.method, this.url, this.pathInfo, this.queryInfo, simpleParam(data));\r\n        }\r\n        else\r\n        {\r\n            throw new APIError(ClientErrorCode.Error, `HTTP Method ${this.method} should not have body.`);\r\n        }\r\n    }\r\n    redirect(redirect: \"follow\" | \"error\" | \"manual\")\r\n    {\r\n        this.redirectOption = redirect;\r\n        return this;\r\n    }\r\n    response<Response>(): ApiFunction<Path, Query, Data, Response>\r\n    {\r\n        const builder = new ApiBuilder<Method, Path, Query, Data, Response>(this.method, this.url, this.pathInfo, this.queryInfo, this.dataInfo);\r\n        return builder.send.bind(builder) as ApiFunction<Path, Query, Data, Response>;\r\n    }\r\n    private async send(params: ValueType<Path> | ValueType<Query>, data: ValueType<Data & ParamsDeclare>): Promise<Response>\r\n    {\r\n        let url = this.url;\r\n        for (const key in this.pathInfo)\r\n        {\r\n            const value = (params as ValueType<Path> as any)[key];\r\n            if (value === undefined)\r\n            {\r\n                if (this.pathInfo[key].optional)\r\n                {\r\n                    url = url.replace(`{${key}}`, \"\");\r\n                    continue;\r\n                }\r\n                throw new APIError(ClientErrorCode.InvalidParameter, `Missing path '${key}'`);\r\n            }\r\n            url = url.replace(`{${key}}`, this.pathInfo[key].validator(key, value as never).toString());\r\n        }\r\n        const queryParams = [];\r\n        for (const key in this.queryInfo) \r\n        {\r\n            const value = (params as Partial<ValueType<Query>> as any)[key];\r\n            if (value === undefined && !this.queryInfo[key].optional)\r\n                throw new APIError(ClientErrorCode.InvalidParameter, `Missing query param '${key}'`);\r\n            else if (value !== undefined)\r\n                queryParams.push(`${key}=${encodeURIComponent(this.queryInfo[key].validator(key, value as never).toString())}`);\r\n        }\r\n        if (queryParams.length > 0)\r\n            url = url + \"?\" + queryParams.join(\"&\");\r\n\r\n        if (this.dataInfo !== undefined)\r\n        {\r\n            for (const key in this.dataInfo)\r\n            {\r\n                const dataInfo = this.dataInfo[key];\r\n                const value = (data as any)[key];\r\n                if (value === undefined && !dataInfo.optional)\r\n                    throw new APIError(ClientErrorCode.InvalidParameter, `Missing field '${key} in request body'`);\r\n                else if (value !== undefined)\r\n                    (data as any)[key] = dataInfo.validator(key, value as never);\r\n            }\r\n        }\r\n\r\n        let response: globalThis.Response;\r\n        try\r\n        {\r\n            response = await fetch(url, {\r\n                method: this.method,\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                redirect: this.redirectOption,\r\n                body: this.dataInfo === undefined ? undefined : JSON.stringify(data as any),\r\n            });\r\n        }\r\n        catch (err)\r\n        {\r\n            console.error(err);\r\n            throw new APIError(ClientErrorCode.NetworkFailure, \"Failed to send request.\");\r\n        }\r\n\r\n        if (response.status >= 400)\r\n        {\r\n            const body = await this.parseBody<ErrorResponse>(response);\r\n            console.warn(`Server response error: ${body.code.toString(16)}: ${body.msg}`);\r\n            throw new APIError(body.code, body.msg);\r\n        }\r\n\r\n        const responseBody = await this.parseBody<SuccessResponse<Response> | ErrorResponse>(response);\r\n        if (responseBody.status == \">_<\")\r\n        {\r\n            console.warn(`Server response error: ${responseBody.code.toString(16)}: ${responseBody.msg}`);\r\n            throw new APIError(responseBody.code, responseBody.msg);\r\n        }\r\n        return responseBody.data;\r\n    }\r\n    private async parseBody<T extends ErrorResponse | SuccessResponse<Response>>(response: globalThis.Response)\r\n    {\r\n        try\r\n        {\r\n            const body = await response.json() as T;\r\n            return body as T;\r\n        }\r\n        catch (err)\r\n        {\r\n            console.error(err);\r\n            throw new APIError(ClientErrorCode.ParseError, \"Failed to parse response body.\");\r\n        }\r\n    }\r\n}\r\n\r\nfunction api<Method extends HTTPMethodsWithBody>(method: Method, url: string): ApiBuilder<Method, {}, {}, {}, any>\r\nfunction api<Method extends HTTPMethodsWithoutBody>(method: Method, url: string): ApiBuilder<Method, {}, {}, undefined, any>\r\nfunction api<Method extends HTTPMethods>(method: Method, url: string): ApiBuilder<Method, {}, {}, {} | undefined, any>\r\n{\r\n    switch (method)\r\n    {\r\n        case \"POST\":\r\n        case \"PUT\":\r\n        case \"PATCH\":\r\n            return new ApiBuilder<Method, {}, {}, {}, null>(method, url, {}, {}, {});\r\n        default:\r\n            return new ApiBuilder<Method, {}, {}, undefined, null>(method, url, {}, {}, undefined);\r\n    }\r\n}\r\n\r\nfunction formatDateTime(time: Date)\r\n{\r\n    const year = time.getFullYear();\r\n    const month = time.getMonth() + 1;\r\n    const day = time.getDate();\r\n    const hour = time.getHours();\r\n    const minute = time.getMinutes();\r\n    const second = time.getSeconds();\r\n    return `${year}-${month}-${day} ${hour}:${minute}:${second}`;\r\n}\r\n\r\nexport interface ProgressRequestOptions\r\n{\r\n    method?: HTTPMethods,\r\n    headers?: { [key: string]: string },\r\n    onUploadProgress?: (sentBytes: number, totalBytes: number) => void,\r\n    body?: string | Document | Blob | ArrayBufferView | ArrayBuffer | FormData | URLSearchParams | ReadableStream<Uint8Array> | null | undefined;\r\n}\r\ninterface RequestProgressResponse\r\n{\r\n    status: number,\r\n    statusText: string,\r\n    json: () => Promise<any>,\r\n    text: () => Promise<string>,\r\n\r\n}\r\nfunction requestWithProgress(url: string, options?: ProgressRequestOptions)\r\n{\r\n    return new Promise<RequestProgressResponse>((resolve, reject) =>\r\n    {\r\n        try\r\n        {\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.open(options?.method ?? \"GET\", url, true);\r\n            if (options?.headers)\r\n            {\r\n                for (const key in options.headers)\r\n                {\r\n                    xhr.setRequestHeader(key, options.headers[key]);\r\n                }\r\n            }\r\n            xhr.upload.onprogress = (ev) =>\r\n            {\r\n                options?.onUploadProgress?.(ev.loaded, ev.total);\r\n            }\r\n            xhr.onreadystatechange = (ev) =>\r\n            {\r\n                if (xhr.readyState !== 4)\r\n                    return;\r\n                \r\n                resolve({\r\n                    status: xhr.status,\r\n                    statusText: xhr.statusText,\r\n                    json: async () => JSON.parse(xhr.responseText),\r\n                    text: async () => xhr.responseText,\r\n                });\r\n            };\r\n            xhr.send(options?.body);\r\n        }\r\n        catch (err)\r\n        {\r\n            reject(err);\r\n        }\r\n    });\r\n}\r\n\r\nconst Uid = {\r\n    type: \"string\" as \"string\",\r\n    validator: validateUid,\r\n};\r\nconst Name = {\r\n    type: \"string\" as \"string\",\r\n    validator: validateName,\r\n};\r\nconst Email = {\r\n    type: \"string\" as \"string\",\r\n    validator: validateEmail,\r\n};\r\nconst Url = {\r\n    type: \"string\" as \"string\",\r\n    validator: validateUrl\r\n};\r\n\r\nexport enum HashMethod\r\n{\r\n    SHA256 = \"SHA256\",\r\n    SHA1 = \"SHA1\",\r\n    MD5 = \"MD5\",\r\n    NoLogin = \"NoLogin\",\r\n}\r\nexport enum DocType\r\n{\r\n    PlainText = \"PlainText\",\r\n    Markdown = \"Markdown\",\r\n    HTML = \"HTML\",\r\n}\r\n\r\nexport interface AuthChallenge\r\n{\r\n    salt: string,\r\n    method: HashMethod,\r\n    challenge: string,\r\n}\r\n\r\nexport interface SessionToken\r\n{\r\n    session_id: string,\r\n    token: string,\r\n    expire: number,\r\n}\r\n\r\nexport interface PubUserInfo\r\n{\r\n    name: string,\r\n    avatar: string,\r\n    url: string | null,\r\n}\r\n\r\nexport interface UserInfo extends PubUserInfo\r\n{\r\n    email: string | null,\r\n}\r\n\r\nexport interface PostStats\r\n{\r\n    views: number,\r\n    likes: number,\r\n    comments: number,\r\n}\r\n\r\nexport interface BlogPreview\r\n{\r\n    pid: number,\r\n    title: string,\r\n    time: string,\r\n    tags: string[],\r\n    author: PubUserInfo,\r\n    preview: string,\r\n}\r\n\r\nexport interface Blog\r\n{\r\n    pid: number,\r\n    title: string,\r\n    author: PubUserInfo,\r\n    time: string,\r\n    tags: string[],\r\n    doc_type: DocType,\r\n    doc: string,\r\n    stats: PostStats,\r\n}\r\n\r\nexport interface BlogContent\r\n{\r\n    title: string,\r\n    tags: string[],\r\n    doc_type: DocType,\r\n    doc: string,\r\n}\r\n\r\nexport interface Note\r\n{\r\n    pid: number,\r\n    author: PubUserInfo,\r\n    time: string,\r\n    doc_type: DocType,\r\n    doc: string,\r\n    stats: PostStats,\r\n}\r\n\r\nexport interface Comment\r\n{\r\n    pid: number,\r\n    comment_to: number,\r\n    author: PubUserInfo,\r\n    time: string,\r\n    text: string,\r\n    comments: Comment[],\r\n    depth: number,\r\n}\r\n\r\nexport interface MiscellaneousPostContent\r\n{\r\n    description: string,\r\n    url: string,\r\n}\r\n\r\nexport interface OSSUploadInfo\r\n{\r\n    key: string,\r\n    token: string,\r\n    upload: string,\r\n}\r\n\r\nconst SardineFishAPI = {\r\n    User: {\r\n        checkAuth: api(\"GET\", \"/api/user\")\r\n            .response<string>(),\r\n        getChallenge: api(\"GET\", \"/api/user/{uid}/challenge\")\r\n            .path({ uid: Uid })\r\n            .response<AuthChallenge>(),\r\n        login: api(\"POST\", \"/api/user/login\")\r\n            .body({ uid: Uid, pwd_hash: \"string\" })\r\n            .response<SessionToken>(),\r\n        signup: api(\"POST\", \"/api/user/signup\")\r\n            .body({\r\n                uid: Uid,\r\n                pwd_hash: \"string\",\r\n                salt: \"string\",\r\n                method: \"string\",\r\n                name: Name,\r\n                email: Email,\r\n                url: Url,\r\n                avatar: Url,\r\n            })\r\n            .response<SessionToken>(),\r\n        signout: api(\"DELETE\", \"/api/user/session\")\r\n            .response<null>(),\r\n        getAvatar: api(\"GET\", \"/api/user/{uid}/avatar\")\r\n            .path({ uid: Uid })\r\n            .redirect(\"manual\")\r\n            .response<string>(),\r\n        avatarUrl: (uid: String) => `/api/user/${uid}/avatar`,\r\n        getInfo: api(\"GET\", \"/api/user/info\")\r\n            .response<UserInfo>(),\r\n        deleteEmail: api(\"DELETE\", \"/api/user/{uid}/info/email\")\r\n            .path({ uid: Uid })\r\n            .response<null>(),\r\n    },\r\n    Blog: {\r\n        getList: api(\"GET\", \"/api/blog\")\r\n            .query({\r\n                from: \"number\",\r\n                count: \"number\",\r\n            })\r\n            .response<BlogPreview[]>(),\r\n        getByPid: api(\"GET\", \"/api/blog/{pid}\")\r\n            .path({ pid: \"number\" })\r\n            .response<Blog>(),\r\n        post: api(\"POST\", \"/api/blog\")\r\n            .body({\r\n                title: {\r\n                    type: \"string\",\r\n                    validator: validateNonEmpty\r\n                },\r\n                tags: \"string[]\",\r\n                doc_type: \"string\",\r\n                doc: {\r\n                    type: \"string\",\r\n                    validator: validateNonEmpty\r\n                }\r\n            })\r\n            .response<number>(),\r\n        update: api(\"PUT\", \"/api/blog/{pid}\")\r\n            .path({ pid: \"number\" })\r\n            .body({\r\n                title: {\r\n                    type: \"string\",\r\n                    validator: validateNonEmpty\r\n                },\r\n                tags: \"string[]\",\r\n                doc_type: \"string\",\r\n                doc: {\r\n                    type: \"string\",\r\n                    validator: validateNonEmpty\r\n                }\r\n            })\r\n            .response<number>(),\r\n        delete: api(\"DELETE\", \"/api/blog/{pid}\")\r\n            .path({ pid: \"number\" })\r\n            .response<BlogContent | null>(),\r\n    },\r\n    Note: {\r\n        getList: api(\"GET\", \"/api/note\")\r\n            .query({\r\n                from: \"number\",\r\n                count: \"number\",\r\n            })\r\n            .response<Note[]>(),\r\n        post: api(\"POST\", \"/api/note\")\r\n            .body({\r\n                name: Name,\r\n                email: {\r\n                    type: \"string\",\r\n                    validator: validateEmail,\r\n                    optional: true,\r\n                },\r\n                url: {\r\n                    type: \"string\",\r\n                    validator: validateUrl,\r\n                    optional: true,\r\n                },\r\n                avatar: Url,\r\n                doc_type: \"string\",\r\n                doc: {\r\n                    type: \"string\",\r\n                    validator: validateNonEmpty,\r\n                }\r\n            })\r\n            .response<number>(),\r\n    },\r\n    Comment: {\r\n        getByPid: api(\"GET\", \"/api/comment/{pid}\")\r\n            .path({ pid: \"number\" })\r\n            .query({\r\n                depth: {\r\n                    type: \"number\",\r\n                    validator: validateByPass,\r\n                    optional: true,\r\n                }\r\n            })\r\n            .response<Comment[]>(),\r\n        post: api(\"POST\", \"/api/comment/{pid}\")\r\n            .path({ pid: \"number\" })\r\n            .body({\r\n                name: Name,\r\n                email: {\r\n                    type: \"string\",\r\n                    validator: validateEmail,\r\n                    optional: true,\r\n                },\r\n                url: {\r\n                    type: \"string\",\r\n                    validator: validateUrl,\r\n                    optional: true,\r\n                },\r\n                avatar: Url,\r\n                text: {\r\n                    type: \"string\",\r\n                    validator: validateNonEmpty,\r\n                }\r\n            })\r\n            .response<number>(),\r\n        delete: api(\"DELETE\", \"/api/comment/{pid}\")\r\n            .path({ pid: \"number\" })\r\n            .response<null | {\r\n                comment_to: number,\r\n                comment_root: number,\r\n                text: string,\r\n            }>(),\r\n    },\r\n    PostData: {\r\n        getStatsByPid: api(\"GET\", \"/api/post/{pid}/stats\")\r\n            .path({ pid: \"number\" })\r\n            .response<PostStats>(),\r\n        like: api(\"POST\", \"/api/post/{pid}/like\")\r\n            .path({ pid: \"number\" })\r\n            .response<number>(),\r\n        dislike: api(\"DELETE\", \"/api/post/{pid}/like\")\r\n            .path({ pid: \"number\" })\r\n            .response<number>(),\r\n        postMisc: api(\"POST\", \"/api/post/misc_post\")\r\n            .body({\r\n                description: {\r\n                    type: \"string\",\r\n                    validator: validateNonEmpty,\r\n                },\r\n                url: Url,\r\n            })\r\n            .response<number>(),\r\n    },\r\n    Storage: {\r\n        getUploadInfo: api(\"POST\", \"/api/oss/new\")\r\n            .response<OSSUploadInfo>(),\r\n    },\r\n    DocType,\r\n    HashMethod,\r\n    Utils: {\r\n        formatDateTime: formatDateTime,\r\n        requestProgress: requestWithProgress,\r\n    }\r\n}\r\n\r\nconst SardineFish = (window as any).SardineFish || {};\r\n(window as any).SardineFish = {\r\n    ...SardineFish,\r\n    API: SardineFishAPI\r\n};\r\n\r\ndeclare global\r\n{\r\n    namespace SardineFish\r\n    {\r\n        const API: typeof SardineFishAPI;\r\n    }\r\n}\r\n\r\nexport default SardineFishAPI;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module\n// This entry module is referenced by other modules so it can't be inlined\n__webpack_require__(\"./SardineFish.API.ts\");\n"],"sourceRoot":""}